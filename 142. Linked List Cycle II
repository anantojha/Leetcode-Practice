/*
 *  Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
 *  To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.
 *  Note: Do not modify the linked list.
*/


class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        
        ListNode* p = head;
        ListNode* q = head;
        
        bool found = false;
        
        while(p != NULL && q != NULL && q->next != NULL)
        {
            p = p->next;
            q = q->next->next;
            if(p == q){
                found = true;
                break;
            }
        }
        if(found == false)
            return NULL;
        
        q = head;
        
        while(p != NULL && q != NULL){
            if(p == q)
                break;
            p = p->next;
            q = q->next;
        }
        return p;
    }
};
